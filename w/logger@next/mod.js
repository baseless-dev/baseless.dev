export var LogLevel;
(function (LogLevel) {
    LogLevel["DEBUG"] = "DEBUG";
    LogLevel["LOG"] = "LOG";
    LogLevel["INFO"] = "INFO";
    LogLevel["WARN"] = "WARN";
    LogLevel["ERROR"] = "ERROR";
    LogLevel["CRITICAL"] = "CRITICAL";
})(LogLevel || (LogLevel = {}));
export const LogSeverity = {
    [LogLevel.DEBUG]: 0,
    [LogLevel.LOG]: 1,
    [LogLevel.INFO]: 2,
    [LogLevel.WARN]: 3,
    [LogLevel.ERROR]: 4,
    [LogLevel.CRITICAL]: 5,
};
let globalLogger = () => { };
export function createLogger(logger = () => { }) {
    globalLogger = logger;
}
export function logger(namespace) {
    return {
        debug: (message) => {
            globalLogger(namespace, LogLevel.DEBUG, message);
        },
        log: (message) => {
            globalLogger(namespace, LogLevel.LOG, message);
        },
        info: (message) => {
            globalLogger(namespace, LogLevel.INFO, message);
        },
        warn: (message) => {
            globalLogger(namespace, LogLevel.WARN, message);
        },
        error: (message) => {
            globalLogger(namespace, LogLevel.ERROR, message);
        },
        critical: (message) => {
            globalLogger(namespace, LogLevel.CRITICAL, message);
        },
    };
}
const defaultLogger = logger("default");
export const debug = defaultLogger.debug;
export const log = defaultLogger.log;
export const info = defaultLogger.info;
export const warn = defaultLogger.warn;
export const error = defaultLogger.error;
export const critical = defaultLogger.critical;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBTixJQUFZLFFBT1g7QUFQRCxXQUFZLFFBQVE7SUFDbkIsMkJBQWUsQ0FBQTtJQUNmLHVCQUFXLENBQUE7SUFDWCx5QkFBYSxDQUFBO0lBQ2IseUJBQWEsQ0FBQTtJQUNiLDJCQUFlLENBQUE7SUFDZixpQ0FBcUIsQ0FBQTtBQUN0QixDQUFDLEVBUFcsUUFBUSxLQUFSLFFBQVEsUUFPbkI7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUc7SUFDMUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUNuQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQ2pCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDbEIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNsQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Q0FDdEIsQ0FBQztBQVFGLElBQUksWUFBWSxHQUFXLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztBQUVwQyxNQUFNLFVBQVUsWUFBWSxDQUFDLFNBQWlCLEdBQUcsRUFBRSxHQUFFLENBQUM7SUFDckQsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUN2QixDQUFDO0FBRUQsTUFBTSxVQUFVLE1BQU0sQ0FBQyxTQUFpQjtJQUN2QyxPQUFPO1FBQ04sS0FBSyxFQUFFLENBQUMsT0FBZSxFQUFFLEVBQUU7WUFDMUIsWUFBWSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFDRCxHQUFHLEVBQUUsQ0FBQyxPQUFlLEVBQUUsRUFBRTtZQUN4QixZQUFZLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDaEQsQ0FBQztRQUNELElBQUksRUFBRSxDQUFDLE9BQWUsRUFBRSxFQUFFO1lBQ3pCLFlBQVksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBQ0QsSUFBSSxFQUFFLENBQUMsT0FBZSxFQUFFLEVBQUU7WUFDekIsWUFBWSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRCxLQUFLLEVBQUUsQ0FBQyxPQUFlLEVBQUUsRUFBRTtZQUMxQixZQUFZLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUNELFFBQVEsRUFBRSxDQUFDLE9BQWUsRUFBRSxFQUFFO1lBQzdCLFlBQVksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNyRCxDQUFDO0tBQ0QsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFeEMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUM7QUFDckMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBMb2dMZXZlbCB7XG5cdERFQlVHID0gXCJERUJVR1wiLFxuXHRMT0cgPSBcIkxPR1wiLFxuXHRJTkZPID0gXCJJTkZPXCIsXG5cdFdBUk4gPSBcIldBUk5cIixcblx0RVJST1IgPSBcIkVSUk9SXCIsXG5cdENSSVRJQ0FMID0gXCJDUklUSUNBTFwiLFxufVxuXG5leHBvcnQgY29uc3QgTG9nU2V2ZXJpdHkgPSB7XG5cdFtMb2dMZXZlbC5ERUJVR106IDAsXG5cdFtMb2dMZXZlbC5MT0ddOiAxLFxuXHRbTG9nTGV2ZWwuSU5GT106IDIsXG5cdFtMb2dMZXZlbC5XQVJOXTogMyxcblx0W0xvZ0xldmVsLkVSUk9SXTogNCxcblx0W0xvZ0xldmVsLkNSSVRJQ0FMXTogNSxcbn07XG5cbmV4cG9ydCB0eXBlIExvZ2dlciA9IChcblx0bmFtZXNwYWNlOiBzdHJpbmcsXG5cdGxldmVsOiBMb2dMZXZlbCxcblx0bWVzc2FnZTogc3RyaW5nLFxuKSA9PiB2b2lkO1xuXG5sZXQgZ2xvYmFsTG9nZ2VyOiBMb2dnZXIgPSAoKSA9PiB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcihsb2dnZXI6IExvZ2dlciA9ICgpID0+IHt9KSB7XG5cdGdsb2JhbExvZ2dlciA9IGxvZ2dlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ2dlcihuYW1lc3BhY2U6IHN0cmluZykge1xuXHRyZXR1cm4ge1xuXHRcdGRlYnVnOiAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG5cdFx0XHRnbG9iYWxMb2dnZXIobmFtZXNwYWNlLCBMb2dMZXZlbC5ERUJVRywgbWVzc2FnZSk7XG5cdFx0fSxcblx0XHRsb2c6IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcblx0XHRcdGdsb2JhbExvZ2dlcihuYW1lc3BhY2UsIExvZ0xldmVsLkxPRywgbWVzc2FnZSk7XG5cdFx0fSxcblx0XHRpbmZvOiAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG5cdFx0XHRnbG9iYWxMb2dnZXIobmFtZXNwYWNlLCBMb2dMZXZlbC5JTkZPLCBtZXNzYWdlKTtcblx0XHR9LFxuXHRcdHdhcm46IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcblx0XHRcdGdsb2JhbExvZ2dlcihuYW1lc3BhY2UsIExvZ0xldmVsLldBUk4sIG1lc3NhZ2UpO1xuXHRcdH0sXG5cdFx0ZXJyb3I6IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcblx0XHRcdGdsb2JhbExvZ2dlcihuYW1lc3BhY2UsIExvZ0xldmVsLkVSUk9SLCBtZXNzYWdlKTtcblx0XHR9LFxuXHRcdGNyaXRpY2FsOiAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG5cdFx0XHRnbG9iYWxMb2dnZXIobmFtZXNwYWNlLCBMb2dMZXZlbC5DUklUSUNBTCwgbWVzc2FnZSk7XG5cdFx0fSxcblx0fTtcbn1cblxuY29uc3QgZGVmYXVsdExvZ2dlciA9IGxvZ2dlcihcImRlZmF1bHRcIik7XG5cbmV4cG9ydCBjb25zdCBkZWJ1ZyA9IGRlZmF1bHRMb2dnZXIuZGVidWc7XG5leHBvcnQgY29uc3QgbG9nID0gZGVmYXVsdExvZ2dlci5sb2c7XG5leHBvcnQgY29uc3QgaW5mbyA9IGRlZmF1bHRMb2dnZXIuaW5mbztcbmV4cG9ydCBjb25zdCB3YXJuID0gZGVmYXVsdExvZ2dlci53YXJuO1xuZXhwb3J0IGNvbnN0IGVycm9yID0gZGVmYXVsdExvZ2dlci5lcnJvcjtcbmV4cG9ydCBjb25zdCBjcml0aWNhbCA9IGRlZmF1bHRMb2dnZXIuY3JpdGljYWw7XG4iXX0=
