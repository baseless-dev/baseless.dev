function refToRegExp(ref) {
    return new RegExp(`^${ref.replace(/:([\w]+)/g, "(?<$1>[^/]+)")}$`);
}
export var DatabasePermissions;
(function (DatabasePermissions) {
    DatabasePermissions[DatabasePermissions["None"] = 0] = "None";
    DatabasePermissions[DatabasePermissions["List"] = 1] = "List";
    DatabasePermissions[DatabasePermissions["Get"] = 2] = "Get";
    DatabasePermissions[DatabasePermissions["Create"] = 4] = "Create";
    DatabasePermissions[DatabasePermissions["Update"] = 8] = "Update";
    DatabasePermissions[DatabasePermissions["Delete"] = 16] = "Delete";
    DatabasePermissions[DatabasePermissions["Subscribe"] = 32] = "Subscribe";
})(DatabasePermissions || (DatabasePermissions = {}));
export class DatabaseBuilder {
    collections = new Set();
    documents = new Set();
    build() {
        return {
            collections: Array.from(this.collections).map((b) => b.build()),
            documents: Array.from(this.documents).map((b) => b.build()),
        };
    }
    collection(reference) {
        const builder = new DatabaseCollectionBuilder(reference);
        this.collections.add(builder);
        return builder;
    }
    document(reference) {
        const builder = new DatabaseDocumentBuilder(reference);
        this.documents.add(builder);
        return builder;
    }
}
export class DatabaseCollectionBuilder {
    ref;
    onCreateHandler;
    permissionHandler;
    constructor(ref) {
        this.ref = ref;
    }
    build() {
        return {
            ref: this.ref,
            matcher: refToRegExp(this.ref),
            onCreate: this.onCreateHandler,
            permission: this.permissionHandler,
        };
    }
    onCreate(handler) {
        this.onCreateHandler = handler;
        return this;
    }
    permission(handler) {
        this.permissionHandler = handler;
        return this;
    }
}
export class DatabaseDocumentBuilder {
    ref;
    onUpdateHandler;
    onDeleteHandler;
    permissionHandler;
    constructor(ref) {
        this.ref = ref;
    }
    build() {
        return {
            ref: this.ref,
            matcher: refToRegExp(this.ref),
            onUpdate: this.onUpdateHandler,
            onDelete: this.onDeleteHandler,
            permission: this.permissionHandler,
        };
    }
    onUpdate(handler) {
        this.onUpdateHandler = handler;
        return this;
    }
    onDelete(handler) {
        this.onDeleteHandler = handler;
        return this;
    }
    permission(handler) {
        this.permissionHandler = handler;
        return this;
    }
}
export const database = new DatabaseBuilder();
//# sourceMappingURL=data:application/json;base64,
