import { UnknownError } from "https://baseless.dev/w/shared/server.js";
import { Deferred } from "../utils.js";
export class FetchTransport {
    baselessUrl;
    constructor(baselessUrl) {
        this.baselessUrl = baselessUrl;
    }
    async send(app, command) {
        const deferred = new Deferred();
        this.sendBatch(app, [[command, deferred]]);
        return await deferred.promise;
    }
    async sendBatch(app, commands) {
        const tokens = app.getAuth()?.getTokens();
        const body = Object.fromEntries(commands.map((c) => c[0]).entries());
        const request = new Request(this.baselessUrl, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-BASELESS-CLIENT-ID": app.getClientId(),
                ...(tokens?.access_token ? { "Authorization": `Bearer ${tokens.access_token}` } : {}),
            },
            body: JSON.stringify(body),
        });
        const response = await fetch(request);
        const results = await response.json();
        for (let i = 0, l = commands.length; i < l; ++i) {
            if (i in results) {
                commands[i][1].resolve(results[i]);
            }
            else {
                commands[i][1].reject(new UnknownError());
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmZXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQW1CLFlBQVksRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFdkMsTUFBTSxPQUFPLGNBQWM7SUFFVDtJQURqQixZQUNpQixXQUFtQjtRQUFuQixnQkFBVyxHQUFYLFdBQVcsQ0FBUTtJQUNqQyxDQUFDO0lBRUosS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFRLEVBQUUsT0FBZ0I7UUFDcEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQVUsQ0FBQztRQUN4QyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxPQUFPLE1BQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUMvQixDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFRLEVBQUUsUUFBdUM7UUFDaEUsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDO1FBQzFDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNyRSxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzdDLE1BQU0sRUFBRSxNQUFNO1lBQ2QsT0FBTyxFQUFFO2dCQUNSLGNBQWMsRUFBRSxrQkFBa0I7Z0JBQ2xDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxXQUFXLEVBQUU7Z0JBQ3pDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLGVBQWUsRUFBRSxVQUFVLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDckY7WUFDRCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7U0FDMUIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUNoRCxJQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7Z0JBQ2pCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkM7aUJBQU07Z0JBQ04sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksRUFBRSxDQUFDLENBQUM7YUFDMUM7U0FDRDtJQUNGLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElUcmFuc3BvcnQgfSBmcm9tIFwiLi90cmFuc3BvcnQudHNcIjtcbmltcG9ydCB7IElCYXRjaGFibGVUcmFuc3BvcnQgfSBmcm9tIFwiLi9iYXRjaC50c1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcC50c1wiO1xuaW1wb3J0IHsgQ29tbWFuZCwgUmVzdWx0LCBVbmtub3duRXJyb3IgfSBmcm9tIFwiaHR0cHM6Ly9iYXNlbGVzcy5kZXYveC9zaGFyZWQvc2VydmVyLnRzXCI7XG5pbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gXCIuLi91dGlscy50c1wiO1xuXG5leHBvcnQgY2xhc3MgRmV0Y2hUcmFuc3BvcnQgaW1wbGVtZW50cyBJVHJhbnNwb3J0LCBJQmF0Y2hhYmxlVHJhbnNwb3J0IHtcblx0cHVibGljIGNvbnN0cnVjdG9yKFxuXHRcdHB1YmxpYyByZWFkb25seSBiYXNlbGVzc1VybDogc3RyaW5nLFxuXHQpIHt9XG5cblx0YXN5bmMgc2VuZChhcHA6IEFwcCwgY29tbWFuZDogQ29tbWFuZCk6IFByb21pc2U8UmVzdWx0PiB7XG5cdFx0Y29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQ8UmVzdWx0PigpO1xuXHRcdHRoaXMuc2VuZEJhdGNoKGFwcCwgW1tjb21tYW5kLCBkZWZlcnJlZF1dKTtcblx0XHRyZXR1cm4gYXdhaXQgZGVmZXJyZWQucHJvbWlzZTtcblx0fVxuXG5cdGFzeW5jIHNlbmRCYXRjaChhcHA6IEFwcCwgY29tbWFuZHM6IFtDb21tYW5kLCBEZWZlcnJlZDxSZXN1bHQ+XVtdKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgdG9rZW5zID0gYXBwLmdldEF1dGgoKT8uZ2V0VG9rZW5zKCk7XG5cdFx0Y29uc3QgYm9keSA9IE9iamVjdC5mcm9tRW50cmllcyhjb21tYW5kcy5tYXAoKGMpID0+IGNbMF0pLmVudHJpZXMoKSk7XG5cdFx0Y29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHRoaXMuYmFzZWxlc3NVcmwsIHtcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuXHRcdFx0XHRcIlgtQkFTRUxFU1MtQ0xJRU5ULUlEXCI6IGFwcC5nZXRDbGllbnRJZCgpLFxuXHRcdFx0XHQuLi4odG9rZW5zPy5hY2Nlc3NfdG9rZW4gPyB7IFwiQXV0aG9yaXphdGlvblwiOiBgQmVhcmVyICR7dG9rZW5zLmFjY2Vzc190b2tlbn1gIH0gOiB7fSksXG5cdFx0XHR9LFxuXHRcdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG5cdFx0fSk7XG5cdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChyZXF1ZXN0KTtcblx0XHRjb25zdCByZXN1bHRzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXHRcdGZvciAobGV0IGkgPSAwLCBsID0gY29tbWFuZHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG5cdFx0XHRpZiAoaSBpbiByZXN1bHRzKSB7XG5cdFx0XHRcdGNvbW1hbmRzW2ldWzFdLnJlc29sdmUocmVzdWx0c1tpXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb21tYW5kc1tpXVsxXS5yZWplY3QobmV3IFVua25vd25FcnJvcigpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiJdfQ==
