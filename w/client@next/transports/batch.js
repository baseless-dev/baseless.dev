import { UnknownError } from "https://baseless.dev/w/shared/server.js";
import { Deferred } from "../utils.js";
export class BatchTransport {
    _batchTransport;
    _batchSize;
    constructor(_batchTransport, _batchSize = 10) {
        this._batchTransport = _batchTransport;
        this._batchSize = _batchSize;
    }
    _batchBuckets = new Map();
    send(app, command) {
        const deferred = new Deferred();
        if (!this._batchBuckets.has(app)) {
            this._batchBuckets.set(app, { timer: 0, commands: [] });
        }
        const bucket = this._batchBuckets.get(app);
        bucket.commands.push([command, deferred]);
        if (!bucket.timer) {
            bucket.timer = setTimeout(async () => {
                while (bucket.commands.length) {
                    const commands = bucket.commands.splice(0, this._batchSize);
                    try {
                        await this._batchTransport.sendBatch(app, commands);
                    }
                    catch (_err) {
                        for (const [, deferred] of commands) {
                            deferred.reject(new UnknownError());
                        }
                    }
                }
                bucket.timer = 0;
            }, 0);
        }
        return deferred.promise;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1CLFlBQVksRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRXhGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFPdkMsTUFBTSxPQUFPLGNBQWM7SUFFTjtJQUNBO0lBRnBCLFlBQ29CLGVBQW9DLEVBQ3BDLGFBQWEsRUFBRTtRQURmLG9CQUFlLEdBQWYsZUFBZSxDQUFxQjtRQUNwQyxlQUFVLEdBQVYsVUFBVSxDQUFLO0lBQ2hDLENBQUM7SUFFTSxhQUFhLEdBQUcsSUFBSSxHQUFHLEVBQXdFLENBQUM7SUFFMUcsSUFBSSxDQUFDLEdBQVEsRUFBRSxPQUFnQjtRQUM5QixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBVSxDQUFDO1FBRXhDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFFLENBQUM7UUFDNUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNsQixNQUFNLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDcEMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtvQkFDOUIsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDNUQsSUFBSTt3QkFDSCxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztxQkFDcEQ7b0JBQUMsT0FBTyxJQUFJLEVBQUU7d0JBQ2QsS0FBSyxNQUFNLENBQUMsRUFBRSxRQUFRLENBQUMsSUFBSSxRQUFRLEVBQUU7NEJBQ3BDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxZQUFZLEVBQUUsQ0FBQyxDQUFDO3lCQUNwQztxQkFDRDtpQkFDRDtnQkFDRCxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUNsQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUN6QixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kLCBSZXN1bHQsIFVua25vd25FcnJvciB9IGZyb20gXCJodHRwczovL2Jhc2VsZXNzLmRldi94L3NoYXJlZC9zZXJ2ZXIudHNcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuLi9hcHAudHNcIjtcbmltcG9ydCB7IERlZmVycmVkIH0gZnJvbSBcIi4uL3V0aWxzLnRzXCI7XG5pbXBvcnQgeyBJVHJhbnNwb3J0IH0gZnJvbSBcIi4vdHJhbnNwb3J0LnRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJhdGNoYWJsZVRyYW5zcG9ydCB7XG5cdHNlbmRCYXRjaChhcHA6IEFwcCwgY29tbWFuZHM6IFtDb21tYW5kLCBEZWZlcnJlZDxSZXN1bHQ+XVtdKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGNsYXNzIEJhdGNoVHJhbnNwb3J0IGltcGxlbWVudHMgSVRyYW5zcG9ydCB7XG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2JhdGNoVHJhbnNwb3J0OiBJQmF0Y2hhYmxlVHJhbnNwb3J0LFxuXHRcdHByb3RlY3RlZCByZWFkb25seSBfYmF0Y2hTaXplID0gMTAsXG5cdCkge31cblxuXHRwcm90ZWN0ZWQgX2JhdGNoQnVja2V0cyA9IG5ldyBNYXA8QXBwLCB7IHRpbWVyOiBudW1iZXI7IGNvbW1hbmRzOiBBcnJheTxbQ29tbWFuZCwgRGVmZXJyZWQ8UmVzdWx0Pl0+IH0+KCk7XG5cblx0c2VuZChhcHA6IEFwcCwgY29tbWFuZDogQ29tbWFuZCk6IFByb21pc2U8UmVzdWx0PiB7XG5cdFx0Y29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQ8UmVzdWx0PigpO1xuXG5cdFx0aWYgKCF0aGlzLl9iYXRjaEJ1Y2tldHMuaGFzKGFwcCkpIHtcblx0XHRcdHRoaXMuX2JhdGNoQnVja2V0cy5zZXQoYXBwLCB7IHRpbWVyOiAwLCBjb21tYW5kczogW10gfSk7XG5cdFx0fVxuXHRcdGNvbnN0IGJ1Y2tldCA9IHRoaXMuX2JhdGNoQnVja2V0cy5nZXQoYXBwKSE7XG5cdFx0YnVja2V0LmNvbW1hbmRzLnB1c2goW2NvbW1hbmQsIGRlZmVycmVkXSk7XG5cdFx0aWYgKCFidWNrZXQudGltZXIpIHtcblx0XHRcdGJ1Y2tldC50aW1lciA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHR3aGlsZSAoYnVja2V0LmNvbW1hbmRzLmxlbmd0aCkge1xuXHRcdFx0XHRcdGNvbnN0IGNvbW1hbmRzID0gYnVja2V0LmNvbW1hbmRzLnNwbGljZSgwLCB0aGlzLl9iYXRjaFNpemUpO1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLl9iYXRjaFRyYW5zcG9ydC5zZW5kQmF0Y2goYXBwLCBjb21tYW5kcyk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoX2Vycikge1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBbLCBkZWZlcnJlZF0gb2YgY29tbWFuZHMpIHtcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KG5ldyBVbmtub3duRXJyb3IoKSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGJ1Y2tldC50aW1lciA9IDA7XG5cdFx0XHR9LCAwKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblx0fVxufVxuIl19
