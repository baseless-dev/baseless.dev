export class EventEmitter {
    handlers;
    constructor(handlers = new Set()) {
        this.handlers = handlers;
    }
    listen(handler) {
        this.handlers.add(handler);
        return () => {
            this.handlers.delete(handler);
        };
    }
    emit(...args) {
        for (const handler of this.handlers) {
            handler(...args);
        }
    }
    clear() {
        this.handlers.clear();
    }
}
export class Deferred {
    promise;
    _resolve;
    _reject;
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;
        });
    }
    resolve(value) {
        this._resolve(value);
    }
    reject(reason) {
        this._reject(reason);
    }
}
export class Lock {
    deferred;
    constructor() { }
    get isLock() {
        return !!this.deferred;
    }
    get waiter() {
        return this.deferred?.promise;
    }
    lock() {
        if (!this.deferred) {
            this.deferred = new Deferred();
        }
    }
    unlock() {
        this.deferred?.resolve();
        this.deferred = undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLE9BQU8sWUFBWTtJQUtiO0lBRFgsWUFDVyxXQUFzQyxJQUFJLEdBQUcsRUFBRTtRQUEvQyxhQUFRLEdBQVIsUUFBUSxDQUF1QztJQUN2RCxDQUFDO0lBS0csTUFBTSxDQUFDLE9BQTZCO1FBQzFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLE9BQU8sR0FBRyxFQUFFO1lBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDO0lBQ0gsQ0FBQztJQUtNLElBQUksQ0FBQyxHQUFHLElBQU87UUFDckIsS0FBSyxNQUFNLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3BDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQ2pCO0lBQ0YsQ0FBQztJQUtNLEtBQUs7UUFDWCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRDtBQUtELE1BQU0sT0FBTyxRQUFRO0lBQ0osT0FBTyxDQUFhO0lBRTVCLFFBQVEsQ0FBc0I7SUFDOUIsT0FBTyxDQUE4QjtJQUU3QztRQUNDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDOUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7WUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sT0FBTyxDQUFDLEtBQVE7UUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQWdCO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEIsQ0FBQztDQUNEO0FBS0QsTUFBTSxPQUFPLElBQUk7SUFDUixRQUFRLENBQWtCO0lBRWxDLGdCQUFzQixDQUFDO0lBRXZCLElBQVcsTUFBTTtRQUNoQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFXLE1BQU07UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQztJQUMvQixDQUFDO0lBRU0sSUFBSTtRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztTQUMvQjtJQUNGLENBQUM7SUFFTSxNQUFNO1FBQ1osSUFBSSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUMzQixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByb3ZpZGVzIG1ldGhvZHMgZm9yIGxpc3RlbmluZyBhbmQgZW1pdHRpbmcgZXZlbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudEVtaXR0ZXI8VCBleHRlbmRzIHVua25vd25bXSB8IFtdPiB7XG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3QgYW4gYEV2ZW50RW1pdHRlcmAgb2JqZWN0XG5cdCAqL1xuXHRwdWJsaWMgY29uc3RydWN0b3IoXG5cdFx0cHJvdGVjdGVkIGhhbmRsZXJzOiBTZXQ8KC4uLmFyZ3M6IFQpID0+IHZvaWQ+ID0gbmV3IFNldCgpLFxuXHQpIHt9XG5cblx0LyoqXG5cdCAqIEFkZCBgaGFuZGxlcmAgdG8gdGhlIGxpc3RlbmVycyBzZXQgYW5kIHJldHVybnMgYSBkaXNwb3NhYmxlIGRlbGVnYXRlXG5cdCAqL1xuXHRwdWJsaWMgbGlzdGVuKGhhbmRsZXI6ICguLi5hcmdzOiBUKSA9PiB2b2lkKSB7XG5cdFx0dGhpcy5oYW5kbGVycy5hZGQoaGFuZGxlcik7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdHRoaXMuaGFuZGxlcnMuZGVsZXRlKGhhbmRsZXIpO1xuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogRW1pdCBhIG5ldyBldmVudCB0byB0aGUgbGlzdGVuZXJzXG5cdCAqL1xuXHRwdWJsaWMgZW1pdCguLi5hcmdzOiBUKSB7XG5cdFx0Zm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuaGFuZGxlcnMpIHtcblx0XHRcdGhhbmRsZXIoLi4uYXJncyk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENsZWFyIHRoZSBsaXN0ZW5lcnMgc2V0XG5cdCAqL1xuXHRwdWJsaWMgY2xlYXIoKSB7XG5cdFx0dGhpcy5oYW5kbGVycy5jbGVhcigpO1xuXHR9XG59XG5cbi8qKlxuICogUHJvdmlkZXMgbWV0aG9kcyBmb3IgZGVmZmVyaW5nIGEgcHJvbWlzZVxuICovXG5leHBvcnQgY2xhc3MgRGVmZXJyZWQ8VCA9IHVua25vd24+IHtcblx0cHVibGljIHJlYWRvbmx5IHByb21pc2U6IFByb21pc2U8VD47XG5cblx0cHJpdmF0ZSBfcmVzb2x2ZSE6ICh2YWx1ZTogVCkgPT4gdm9pZDtcblx0cHJpdmF0ZSBfcmVqZWN0ITogKHJlYXNvbj86IHVua25vd24pID0+IHZvaWQ7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuXHRcdFx0dGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xuXHRcdH0pO1xuXHR9XG5cblx0cHVibGljIHJlc29sdmUodmFsdWU6IFQpIHtcblx0XHR0aGlzLl9yZXNvbHZlKHZhbHVlKTtcblx0fVxuXG5cdHB1YmxpYyByZWplY3QocmVhc29uPzogdW5rbm93bikge1xuXHRcdHRoaXMuX3JlamVjdChyZWFzb24pO1xuXHR9XG59XG5cbi8qKlxuICogUHJvdmlkZXMgbWV0aG9kcyBmb3IgbG9ja2luZyBhbmQgd2FpdGluZyBvbiBhIHByb21pc2VcbiAqL1xuZXhwb3J0IGNsYXNzIExvY2sge1xuXHRwcml2YXRlIGRlZmVycmVkPzogRGVmZXJyZWQ8dm9pZD47XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKCkge31cblxuXHRwdWJsaWMgZ2V0IGlzTG9jaygpIHtcblx0XHRyZXR1cm4gISF0aGlzLmRlZmVycmVkO1xuXHR9XG5cblx0cHVibGljIGdldCB3YWl0ZXIoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZGVmZXJyZWQ/LnByb21pc2U7XG5cdH1cblxuXHRwdWJsaWMgbG9jaygpIHtcblx0XHRpZiAoIXRoaXMuZGVmZXJyZWQpIHtcblx0XHRcdHRoaXMuZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgdW5sb2NrKCkge1xuXHRcdHRoaXMuZGVmZXJyZWQ/LnJlc29sdmUoKTtcblx0XHR0aGlzLmRlZmVycmVkID0gdW5kZWZpbmVkO1xuXHR9XG59XG4iXX0=
